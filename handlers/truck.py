# handlers/truck.py

from aiogram import types, Dispatcher
from aiogram.types import KeyboardButton
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime

from db import get_connection
from .common import get_main_menu, ask_and_store
from utils import (
    parse_date,
    get_current_user_id,
    format_date_for_display,
    show_progress,
)


class TruckAddStates(StatesGroup):
    city          = State()
    region        = State()
    date_from     = State()
    date_to       = State()
    weight        = State()
    body_type     = State()
    direction     = State()
    route_regions = State()
    comment       = State()


class TruckSearchStates(StatesGroup):
    city          = State()
    date_from     = State()
    date_to       = State()


# ========== –°–¶–ï–ù–ê–†–ò–ô: –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–° ==========

async def cmd_start_add_truck(message: types.Message, state: FSMContext):
    user_id = await get_current_user_id(message)
    if not user_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start.")
        return

    await message.answer(
        "üöõ –ù–∞—á–Ω—ë–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¢–°.\n–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Å—Ç–æ–∏—Ç –¢–°?",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    await show_progress(message, 1, 9)
    await state.set_state(TruckAddStates.city)


async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text.strip())
    await ask_and_store(
        message,
        state,
        "–†–µ–≥–∏–æ–Ω —Å—Ç–æ—è–Ω–∫–∏:",
        TruckAddStates.region
    )
    await show_progress(message, 2, 9)


async def process_region(message: types.Message, state: FSMContext):
    await state.update_data(region=message.text.strip())
    await ask_and_store(
        message,
        state,
        "–î–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (—Å) (–î–î.MM.–ì–ì–ì–ì):",
        TruckAddStates.date_from
    )
    await show_progress(message, 3, 9)


async def process_date_from(message: types.Message, state: FSMContext):
    raw = message.text.strip()
    parsed = parse_date(raw)
    if not parsed:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –î–î.MM.–ì–ì–ì–ì:")
        return

    await state.update_data(date_from=parsed)
    await ask_and_store(
        message,
        state,
        "–î–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (–ø–æ) (–î–î.MM.–ì–ì–ì–ì):",
        TruckAddStates.date_to
    )
    await show_progress(message, 4, 9)


async def process_date_to(message: types.Message, state: FSMContext):
    raw = message.text.strip()
    parsed_to = parse_date(raw)
    if not parsed_to:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –î–î.MM.–ì–ì–ì–ì:")
        return

    data = await state.get_data()
    df_iso = data.get("date_from")
    dt_from = datetime.strptime(df_iso, "%Y-%m-%d") if df_iso else None

    dt_to = datetime.strptime(parsed_to, "%Y-%m-%d")
    if dt_from and dt_to < dt_from:
        await message.answer("–î–∞—Ç–∞ ¬´–ø–æ¬ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã ¬´—Å¬ª. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return

    await state.update_data(date_to=parsed_to)
    await ask_and_store(
        message,
        state,
        "–ì—Ä—É–∑–æ–ø–æ–¥—ä—ë–º–Ω–æ—Å—Ç—å (–≤ —Ç–æ–Ω–Ω–∞—Ö):",
        TruckAddStates.weight
    )
    await show_progress(message, 5, 9)


async def process_weight(message: types.Message, state: FSMContext):
    raw = message.text.strip()
    try:
        weight = int(raw)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ –≥—Ä—É–∑–æ–ø–æ–¥—ä—ë–º–Ω–æ—Å—Ç—å —Ü–∏—Ñ—Ä–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15):")
        return

    await state.update_data(weight=weight)

    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä")],
            [KeyboardButton(text="–¢–µ–Ω—Ç")],
            [KeyboardButton(text="–ò–∑–æ—Ç–µ—Ä–º")],
            [KeyboardButton(text="–õ—é–±–æ–π")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await ask_and_store(
        message,
        state,
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫—É–∑–æ–≤–∞ –¢–°:",
        TruckAddStates.body_type,
        reply_markup=kb
    )
    await show_progress(message, 6, 9)


async def process_body_type(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text not in ("–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä", "–¢–µ–Ω—Ç", "–ò–∑–æ—Ç–µ—Ä–º", "–õ—é–±–æ–π"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫: ¬´–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä¬ª, ¬´–¢–µ–Ω—Ç¬ª, ¬´–ò–∑–æ—Ç–µ—Ä–º¬ª –∏–ª–∏ ¬´–õ—é–±–æ–π¬ª.")
        return

    await state.update_data(body_type=text)

    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ò—â—É –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="–ü–æ–ø—É—Ç–Ω—ã–π –ø—É—Ç—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await ask_and_store(
        message,
        state,
        "–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
        TruckAddStates.direction,
        reply_markup=kb
    )
    await show_progress(message, 7, 9)


async def process_direction(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text not in ("–ò—â—É –∑–∞–∫–∞–∑", "–ü–æ–ø—É—Ç–Ω—ã–π –ø—É—Ç—å"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ ¬´–ò—â—É –∑–∞–∫–∞–∑¬ª –∏–ª–∏ ¬´–ü–æ–ø—É—Ç–Ω—ã–π –ø—É—Ç—å¬ª.")
        return

    await state.update_data(direction=text)
    await ask_and_store(
        message,
        state,
        "–ü–µ—Ä–µ—á–∏—Å–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Ä–µ–≥–∏–æ–Ω—ã, –≥–¥–µ –≥–æ—Ç–æ–≤ –µ—Ö–∞—Ç—å (–∏–ª–∏ '–Ω–µ—Ç'):",
        TruckAddStates.route_regions
    )
    await show_progress(message, 8, 9)


async def process_route_regions(message: types.Message, state: FSMContext):
    text = message.text.strip()
    regions = text if text.lower() != "–Ω–µ—Ç" else ""
    await state.update_data(route_regions=regions)
    await ask_and_store(
        message,
        state,
        "–î–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'):",
        TruckAddStates.comment
    )
    await show_progress(message, 9, 9)


async def process_truck_comment(message: types.Message, state: FSMContext):
    text = message.text.strip()
    comment = text if text.lower() != "–Ω–µ—Ç" else ""
    data = await state.get_data()

    required = ["city", "region", "date_from", "date_to", "weight", "body_type", "direction", "route_regions"]
    if not all(k in data for k in required):
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –¢–°¬ª –µ—â—ë —Ä–∞–∑.")
        await state.clear()
        return

    user_id = await get_current_user_id(message)
    if not user_id:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å. –°–Ω–∞—á–∞–ª–∞ /start.")
        await state.clear()
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
    await message.delete()
    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–æ—Ç-–≤–æ–ø—Ä–æ—Å
    bot_data = await state.get_data()
    last_bot_msg_id = bot_data.get("last_bot_message_id")
    if last_bot_msg_id:
        try:
            await message.chat.delete_message(last_bot_msg_id)
        except Exception:
            pass

    # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(
            """
            INSERT INTO trucks (
                user_id, city, region,
                date_from, date_to,
                weight, body_type,
                direction, route_regions,
                comment, created_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """,
            (
                user_id,
                data["city"], data["region"],
                data["date_from"], data["date_to"],
                data["weight"], data["body_type"],
                data["direction"], data["route_regions"],
                comment, datetime.now().isoformat()
            )
        )
        conn.commit()

    await message.answer("‚úÖ –¢–° —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=get_main_menu())
    await state.clear()

# ========== –°–¶–ï–ù–ê–†–ò–ô: –ü–û–ò–°–ö –¢–° –° –ö–ù–û–ü–ö–ê–ú–ò ==========

async def cmd_start_find_trucks(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ –¢–°. –í–º–µ—Å—Ç–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤—ã–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    —Å–æ –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏ —Å—Ç–æ—è–Ω–∫–∏ (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã trucks) + –∫–Ω–æ–ø–∫—É "–í—Å–µ".
    """
    user_id = await get_current_user_id(message)
    if not user_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start.")
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä (–Ω–∞–∂–∞—Ç–∏–µ "üîç –ù–∞–π—Ç–∏ –¢–°")
    await message.delete()

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ —Å—Ç–æ—è–Ω–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã trucks
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT city FROM trucks WHERE city IS NOT NULL")
    rows = cursor.fetchall()
    conn.close()

    cities = [r["city"] for r in rows if r["city"].strip()]
    cities.sort(key=lambda x: x.lower())

    kb_buttons = [[types.KeyboardButton(text=city)] for city in cities]
    kb_buttons.append([types.KeyboardButton(text="–í—Å–µ")])

    kb = types.ReplyKeyboardMarkup(
        keyboard=kb_buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )

    bot_msg = await message.answer(
        "üîç –ü–æ–∏—Å–∫ –¢–°.\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–í—Å–µ¬ª):",
        reply_markup=kb
    )
    await state.update_data(last_bot_message_id=bot_msg.message_id)
    await state.set_state(TruckSearchStates.city)

async def filter_city(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ (–∏–ª–∏ '–í—Å–µ') –¥–ª—è –ø–æ–∏—Å–∫–∞ –¢–°.
    –ó–∞—Ç–µ–º —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞.
    """
    selected = message.text.strip()
    await state.update_data(filter_city=selected.lower())

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    await message.delete()
    data = await state.get_data()
    prev_bot_id = data.get("last_bot_message_id")
    if prev_bot_id:
        try:
            await message.chat.delete_message(prev_bot_id)
        except Exception:
            pass

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–î–î.MM.–ì–ì–ì–ì) –∏–ª–∏ '–Ω–µ—Ç'
    bot_msg = await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–î–î.MM.–ì–ì–ì–ì) –∏–ª–∏ ¬´–Ω–µ—Ç¬ª:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.update_data(last_bot_message_id=bot_msg.message_id)
    await state.set_state(TruckSearchStates.date_from)

async def filter_date_from_truck(message: types.Message, state: FSMContext):
    raw = message.text.strip().lower()
    if raw != "–Ω–µ—Ç":
        parsed = parse_date(message.text.strip())
        if not parsed:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –î–î.MM.–ì–ì–ì–ì –∏–ª–∏ ¬´–Ω–µ—Ç¬ª.")
            return
        await state.update_data(filter_date_from=parsed)
    else:
        await state.update_data(filter_date_from="–Ω–µ—Ç")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–æ—Ç-–≤–æ–ø—Ä–æ—Å
    await message.delete()
    data = await state.get_data()
    prev_bot_id = data.get("last_bot_message_id")
    if prev_bot_id:
        try:
            await message.chat.delete_message(prev_bot_id)
        except Exception:
            pass

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
    bot_msg = await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–î–î.MM.–ì–ì–ì–ì) –∏–ª–∏ ¬´–Ω–µ—Ç¬ª:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.update_data(last_bot_message_id=bot_msg.message_id)
    await state.set_state(TruckSearchStates.date_to)

async def filter_date_to_truck(message: types.Message, state: FSMContext):
    raw = message.text.strip().lower()
    if raw != "–Ω–µ—Ç":
        parsed = parse_date(message.text.strip())
        if not parsed:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –î–î.MM.–ì–ì–ì–ì –∏–ª–∏ ¬´–Ω–µ—Ç¬ª.")
            return
        await state.update_data(filter_date_to=parsed)
    else:
        await state.update_data(filter_date_to="–Ω–µ—Ç")

    data = await state.get_data()
    fc = data.get("filter_city", "")
    fd_from = data.get("filter_date_from", "")
    fd_to = data.get("filter_date_to", "")

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å —Å —É—á—ë—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    query = """
    SELECT t.id, u.name, t.city, t.region, t.date_from, t.weight, t.body_type, t.direction
    FROM trucks t
    JOIN users u ON t.user_id = u.id
    WHERE 1=1
    """
    params = []
    if fc != "–≤—Å–µ":
        query += " AND lower(t.city) = ?"
        params.append(fc)
    if fd_from != "–Ω–µ—Ç":
        query += " AND date(t.date_from) >= date(?)"
        params.append(fd_from)
    if fd_to != "–Ω–µ—Ç":
        query += " AND date(t.date_from) <= date(?)"
        params.append(fd_to)

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute(query, tuple(params))
    rows = cursor.fetchall()
    conn.close()

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–æ—Ç-–≤–æ–ø—Ä–æ—Å
    await message.delete()
    prev_bot_id = data.get("last_bot_message_id")
    if prev_bot_id:
        try:
            await message.chat.delete_message(prev_bot_id)
        except Exception:
            pass

    if not rows:
        await message.answer("üì¨ –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –¢–° –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_main_menu())
    else:
        text = "üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¢–°:\n\n"
        for r in rows:
            date_disp = format_date_for_display(r["date_from"])
            text += (
                f"ID: {r['id']}\n"
                f"–í–ª–∞–¥–µ–ª–µ—Ü: {r['name']}\n"
                f"{r['city']}, {r['region']}\n"
                f"–î–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ: {date_disp}\n"
                f"–ì—Ä—É–∑–æ–ø–æ–¥—ä—ë–º–Ω–æ—Å—Ç—å: {r['weight']} —Ç, –ö—É–∑–æ–≤: {r['body_type']}\n"
                f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {r['direction']}\n\n"
            )
        await message.answer(text, reply_markup=get_main_menu())

    await state.clear()

def register_truck_handlers(dp: Dispatcher):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¢–° (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    dp.message.register(cmd_start_add_truck, lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¢–°")
    dp.message.register(process_city,          StateFilter(TruckAddStates.city))
    dp.message.register(process_region,        StateFilter(TruckAddStates.region))
    dp.message.register(process_date_from,     StateFilter(TruckAddStates.date_from))
    dp.message.register(process_date_to,       StateFilter(TruckAddStates.date_to))
    dp.message.register(process_weight,        StateFilter(TruckAddStates.weight))
    dp.message.register(process_body_type,     StateFilter(TruckAddStates.body_type))
    dp.message.register(process_direction,     StateFilter(TruckAddStates.direction))
    dp.message.register(process_route_regions, StateFilter(TruckAddStates.route_regions))
    dp.message.register(process_truck_comment, StateFilter(TruckAddStates.comment))

    dp.message.register(cmd_start_find_trucks,       lambda m: m.text == "üîç –ù–∞–π—Ç–∏ –¢–°")
    dp.message.register(filter_city,                 StateFilter(TruckSearchStates.city))
    dp.message.register(filter_date_from_truck,      StateFilter(TruckSearchStates.date_from))
    dp.message.register(filter_date_to_truck,        StateFilter(TruckSearchStates.date_to))
