# handlers/common.py

from aiogram import types, Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
from aiogram.exceptions import TelegramBadRequest


def get_main_menu() -> ReplyKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ReplyKeyboardMarkup —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏:
    –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–∑, –î–æ–±–∞–≤–∏—Ç—å –¢–°, –ù–∞–π—Ç–∏ –≥—Ä—É–∑, –ù–∞–π—Ç–∏ –¢–°, –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å.
    """
    buttons = [
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–∑")],
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¢–°")],
        [KeyboardButton(text="üîç –ù–∞–π—Ç–∏ –≥—Ä—É–∑"), KeyboardButton(text="üîç –ù–∞–π—Ç–∏ –¢–°")],
        [KeyboardButton(text="üìã –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")]
    ]
    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=False
    )


async def ask_and_store(
    message: types.Message,
    state: FSMContext,
    text: str,
    next_state: State,
    reply_markup: types.ReplyKeyboardMarkup | None = None
):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–æ—Ç-–≤–æ–ø—Ä–æ—Å (–µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ FSMContext),
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (text) —Å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º reply_markup –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ message_id.
    –ó–∞—Ç–µ–º –ø–µ—Ä–µ–≤–æ–¥–∏—Ç FSM –≤ next_state.
    """
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except TelegramBadRequest:
        pass

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–æ—Ç-–≤–æ–ø—Ä–æ—Å
    data = await state.get_data()
    prev_bot_msg_id = data.get("last_bot_message_id")
    if prev_bot_msg_id:
        try:
            await message.chat.delete_message(prev_bot_msg_id)
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    if reply_markup:
        bot_msg = await message.answer(text, reply_markup=reply_markup)
    else:
        bot_msg = await message.answer(text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    await state.update_data(last_bot_message_id=bot_msg.message_id)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å
    await state.set_state(next_state)


async def cmd_cancel(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())


async def cmd_help(message: types.Message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥."""
    text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
    )
    await message.answer(text)


def register_common_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—â–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤."""
    dp.message.register(cmd_cancel, Command(commands=["cancel"]))
    dp.message.register(cmd_help, Command(commands=["help"]))

