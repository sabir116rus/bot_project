# handlers/cargo.py

from aiogram import types, Dispatcher
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
from states import BaseStates
from datetime import datetime

from db import get_connection
from .common import (
    get_main_menu,
    ask_and_store,
    show_search_results,
    create_paged_keyboard,
)
from calendar_keyboard import generate_calendar
from utils import (
    parse_date,
    get_current_user_id,
    format_date_for_display,
    show_progress,
    log_user_action,
    get_unique_cities_from,
    get_unique_cities_to,
    clear_city_cache,
    validate_weight,
)
from locations import (
    get_regions,
    get_cities,
    get_regions_page,
    get_cities_page,
)
from config import Config

class CargoAddStates(BaseStates):
    region_from  = State()
    city_from    = State()
    region_to    = State()
    city_to      = State()
    date_from    = State()
    date_to      = State()
    weight       = State()
    body_type    = State()
    is_local     = State()
    comment      = State()


class CargoSearchStates(BaseStates):
    city_from    = State()
    city_to      = State()
    date_from    = State()
    date_to      = State()


# ========== –°–¶–ï–ù–ê–†–ò–ô: –î–û–ë–ê–í–õ–ï–ù–ò–ï –ì–†–£–ó–ê ==========

async def cmd_start_add_cargo(message: types.Message, state: FSMContext):
    user_id = await get_current_user_id(message)
    if not user_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start.")
        return

    # –£–¥–∞–ª—è–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    page = 0
    regions, _, has_next = get_regions_page(page)
    kb = create_paged_keyboard(regions, False, has_next)
    await show_progress(message, state, 1, 10)
    await ask_and_store(
        message,
        state,
        "üì¶ –ù–∞—á–Ω—ë–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞.\n–í—ã–±–µ—Ä–∏ —Ä–µ–≥–∏–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        CargoAddStates.region_from,
        reply_markup=kb,
    )
    await state.update_data(rf_page=page)


async def process_region_from(message: types.Message, state: FSMContext):
    text = message.text.strip()
    data = await state.get_data()
    page = data.get("rf_page", 0)

    if text == "–í–ø–µ—Ä—ë–¥":
        page += 1
    elif text == "–ù–∞–∑–∞–¥":
        page = max(page - 1, 0)
    if text in {"–í–ø–µ—Ä—ë–¥", "–ù–∞–∑–∞–¥"}:
        regions, has_prev, has_next = get_regions_page(page)
        kb = create_paged_keyboard(regions, has_prev, has_next)
        await ask_and_store(
            message,
            state,
            "–í—ã–±–µ—Ä–∏ —Ä–µ–≥–∏–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            CargoAddStates.region_from,
            reply_markup=kb,
        )
        await state.update_data(rf_page=page)
        return

    if text not in get_regions():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ä–µ–≥–∏–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(region_from=text)

    cpage = 0
    cities, _, has_next = get_cities_page(text, cpage)
    kb = create_paged_keyboard(cities, False, has_next)

    await show_progress(message, state, 2, 10)
    await ask_and_store(
        message,
        state,
        "–û—Ç–∫—É–¥–∞ (–≥–æ—Ä–æ–¥):",
        CargoAddStates.city_from,
        reply_markup=kb,
    )
    await state.update_data(cf_page=cpage)


async def process_city_from(message: types.Message, state: FSMContext):
    text = message.text.strip()
    data = await state.get_data()
    page = data.get("cf_page", 0)
    region = data.get("region_from")

    if text == "–í–ø–µ—Ä—ë–¥":
        page += 1
    elif text == "–ù–∞–∑–∞–¥":
        page = max(page - 1, 0)
    if text in {"–í–ø–µ—Ä—ë–¥", "–ù–∞–∑–∞–¥"}:
        cities, has_prev, has_next = get_cities_page(region, page)
        kb = create_paged_keyboard(cities, has_prev, has_next)
        await ask_and_store(
            message,
            state,
            "–û—Ç–∫—É–¥–∞ (–≥–æ—Ä–æ–¥):",
            CargoAddStates.city_from,
            reply_markup=kb,
        )
        await state.update_data(cf_page=page)
        return

    await state.update_data(city_from=text)

    rpage = 0
    regions, _, has_next = get_regions_page(rpage)
    kb = create_paged_keyboard(regions, False, has_next)

    await show_progress(message, state, 3, 10)
    await ask_and_store(
        message,
        state,
        "–†–µ–≥–∏–æ–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
        CargoAddStates.region_to,
        reply_markup=kb,
    )
    await state.update_data(rt_page=rpage)


async def process_region_to(message: types.Message, state: FSMContext):
    text = message.text.strip()
    data = await state.get_data()
    page = data.get("rt_page", 0)

    if text == "–í–ø–µ—Ä—ë–¥":
        page += 1
    elif text == "–ù–∞–∑–∞–¥":
        page = max(page - 1, 0)
    if text in {"–í–ø–µ—Ä—ë–¥", "–ù–∞–∑–∞–¥"}:
        regions, has_prev, has_next = get_regions_page(page)
        kb = create_paged_keyboard(regions, has_prev, has_next)
        await ask_and_store(
            message,
            state,
            "–†–µ–≥–∏–æ–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
            CargoAddStates.region_to,
            reply_markup=kb,
        )
        await state.update_data(rt_page=page)
        return

    if text not in get_regions():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ä–µ–≥–∏–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(region_to=text)

    cpage = 0
    cities, _, has_next = get_cities_page(text, cpage)
    kb = create_paged_keyboard(cities, False, has_next)

    await show_progress(message, state, 4, 10)
    await ask_and_store(
        message,
        state,
        "–ö—É–¥–∞ (–≥–æ—Ä–æ–¥):",
        CargoAddStates.city_to,
        reply_markup=kb,
    )
    await state.update_data(ct_page=cpage)


async def process_city_to(message: types.Message, state: FSMContext):
    text = message.text.strip()
    data = await state.get_data()
    page = data.get("ct_page", 0)
    region = data.get("region_to")

    if text == "–í–ø–µ—Ä—ë–¥":
        page += 1
    elif text == "–ù–∞–∑–∞–¥":
        page = max(page - 1, 0)
    if text in {"–í–ø–µ—Ä—ë–¥", "–ù–∞–∑–∞–¥"}:
        cities, has_prev, has_next = get_cities_page(region, page)
        kb = create_paged_keyboard(cities, has_prev, has_next)
        await ask_and_store(
            message,
            state,
            "–ö—É–¥–∞ (–≥–æ—Ä–æ–¥):",
            CargoAddStates.city_to,
            reply_markup=kb,
        )
        await state.update_data(ct_page=page)
        return

    await state.update_data(city_to=text)
    await show_progress(message, state, 5, 10)
    await ask_and_store(
        message,
        state,
        "–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        CargoAddStates.date_from,
        reply_markup=generate_calendar(),
    )
    await state.update_data(
        calendar_field="date_from",
        calendar_next_state=CargoAddStates.date_to,
        calendar_next_text="–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è:",
        calendar_next_markup=generate_calendar(),
    )


async def process_date_from(message: types.Message, state: FSMContext):
    raw = message.text.strip()
    parsed = parse_date(raw)
    if not parsed:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –î–î.MM.–ì–ì–ì–ì:")
        return

    await state.update_data(date_from=parsed)
    await show_progress(message, state, 6, 10)
    await ask_and_store(
        message,
        state,
        "–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è:",
        CargoAddStates.date_to,
        reply_markup=generate_calendar(),
    )
    await state.update_data(
        calendar_field="date_to",
        calendar_next_state=CargoAddStates.weight,
        calendar_next_text="–í–µ—Å (–≤ —Ç–æ–Ω–Ω–∞—Ö, —Ü–∏—Ñ—Ä–æ–π):",
        calendar_next_markup=None,
    )


async def process_date_to(message: types.Message, state: FSMContext):
    raw = message.text.strip()
    parsed_to = parse_date(raw)
    if not parsed_to:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –î–î.MM.–ì–ì–ì–ì:")
        return

    data = await state.get_data()
    df_iso = data.get("date_from")
    dt_from = datetime.strptime(df_iso, "%Y-%m-%d") if df_iso else None

    dt_to = datetime.strptime(parsed_to, "%Y-%m-%d")
    if dt_from and dt_to < dt_from:
        await message.answer("–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return

    await state.update_data(date_to=parsed_to)
    await show_progress(message, state, 7, 10)
    await ask_and_store(
        message,
        state,
        "–í–µ—Å (–≤ —Ç–æ–Ω–Ω–∞—Ö, —Ü–∏—Ñ—Ä–æ–π):",
        CargoAddStates.weight
    )
    await state.update_data(calendar_field=None)


async def process_date_from_cb(callback: types.CallbackQuery, state: FSMContext):
    """Handle date_from selection from the calendar."""
    date_iso = callback.data.split(":", 1)[1]
    await state.update_data(date_from=date_iso)
    await callback.message.delete()
    bot_msg = await callback.message.answer(
        "–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è:", reply_markup=generate_calendar()
    )
    await state.update_data(
        last_bot_message_id=bot_msg.message_id,
        calendar_field="date_to",
    )
    await state.set_state(CargoAddStates.date_to)
    await callback.answer()


async def process_date_to_cb(callback: types.CallbackQuery, state: FSMContext):
    """Handle date_to selection from the calendar."""
    date_iso = callback.data.split(":", 1)[1]
    data = await state.get_data()
    df_iso = data.get("date_from")
    dt_from = datetime.strptime(df_iso, "%Y-%m-%d") if df_iso else None
    dt_to = datetime.strptime(date_iso, "%Y-%m-%d")
    if dt_from and dt_to < dt_from:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞", show_alert=True)
        return
    await state.update_data(date_to=date_iso, calendar_field=None)
    await callback.message.delete()
    bot_msg = await callback.message.answer(
        "–í–µ—Å (–≤ —Ç–æ–Ω–Ω–∞—Ö, —Ü–∏—Ñ—Ä–æ–π):"
    )
    await state.update_data(last_bot_message_id=bot_msg.message_id)
    await state.set_state(CargoAddStates.weight)
    await callback.answer()


async def process_weight(message: types.Message, state: FSMContext):
    """Store cargo weight after validating the user input."""
    raw = message.text.strip()
    ok, weight = validate_weight(raw)
    if not ok:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Å –æ—Ç 1 –¥–æ 1000 —Ç–æ–Ω–Ω —Ü–∏—Ñ—Ä–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12):"
        )
        return

    await state.update_data(weight=weight)

    kb_buttons = [[types.KeyboardButton(text=bt)] for bt in Config.BODY_TYPES]
    kb_buttons.append([types.KeyboardButton(text="–ù–µ –≤–∞–∂–Ω–æ")])
    kb = types.ReplyKeyboardMarkup(
        keyboard=kb_buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await show_progress(message, state, 8, 10)
    await ask_and_store(
        message,
        state,
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫—É–∑–æ–≤–∞:",
        CargoAddStates.body_type,
        reply_markup=kb
    )


async def process_body_type(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text not in (Config.BODY_TYPES + ["–ù–µ –≤–∞–∂–Ω–æ"]):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:\n¬´–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä¬ª, ¬´–¢–µ–Ω—Ç¬ª, ¬´–ò–∑–æ—Ç–µ—Ä–º¬ª –∏–ª–∏ ¬´–ù–µ –≤–∞–∂–Ω–æ¬ª.")
        return

    await state.update_data(body_type=text)

    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–î–∞ (–≤–Ω—É—Ç—Ä–∏–≥–æ—Ä–æ–¥—Å–∫–æ–π)")],
            [types.KeyboardButton(text="–ù–µ—Ç (–º–µ–∂–¥—É–≥–æ—Ä–æ–¥–Ω–∏–π)")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await show_progress(message, state, 9, 10)
    await ask_and_store(
        message,
        state,
        "–í–Ω—É—Ç—Ä–∏–≥–æ—Ä–æ–¥—Å–∫–æ–π –≥—Ä—É–∑?",
        CargoAddStates.is_local,
        reply_markup=kb
    )


async def process_is_local(message: types.Message, state: FSMContext):
    text = message.text.strip().lower()
    if not ("–¥–∞" in text or "–Ω–µ—Ç" in text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ ¬´–î–∞ (–≤–Ω—É—Ç—Ä–∏–≥–æ—Ä–æ–¥—Å–∫–æ–π)¬ª –∏–ª–∏ ¬´–ù–µ—Ç (–º–µ–∂–¥—É–≥–æ—Ä–æ–¥–Ω–∏–π)¬ª.")
        return

    is_local = 1 if "–¥–∞" in text else 0
    await state.update_data(is_local=is_local)
    await show_progress(message, state, 10, 10)
    await ask_and_store(
        message,
        state,
        "–î–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'):",
        CargoAddStates.comment
    )


async def process_comment(message: types.Message, state: FSMContext):
    text = message.text.strip()
    comment = text if text.lower() != "–Ω–µ—Ç" else ""
    data = await state.get_data()

    required_fields = [
        "city_from", "region_from", "city_to", "region_to",
        "date_from", "date_to", "weight", "body_type", "is_local"
    ]
    if not all(field in data for field in required_fields):
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–∑¬ª –µ—â—ë —Ä–∞–∑.")
        await state.clear()
        return

    user_id = await get_current_user_id(message)
    if not user_id:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å. –°–Ω–∞—á–∞–ª–∞ /start.")
        await state.clear()
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º)
    await message.delete()
    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–æ—Ç-–≤–æ–ø—Ä–æ—Å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
    bot_data = await state.get_data()
    last_bot_msg_id = bot_data.get("last_bot_message_id")
    if last_bot_msg_id:
        try:
            await message.chat.delete_message(last_bot_msg_id)
        except Exception:
            pass
    progress_msg_id = bot_data.get("last_progress_message_id")
    if progress_msg_id:
        try:
            await message.chat.delete_message(progress_msg_id)
        except Exception:
            pass
    await state.update_data(last_progress_message_id=None)

    # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(
            """
            INSERT INTO cargo (
                user_id,
                city_from, region_from,
                city_to, region_to,
                date_from, date_to,
                weight, body_type,
                is_local, comment, created_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """,
            (
                user_id,
                data["city_from"], data["region_from"],
                data["city_to"], data["region_to"],
                data["date_from"], data["date_to"],
                data["weight"], data["body_type"],
                data["is_local"], comment,
                datetime.now().isoformat()
            )
        )
        conn.commit()

    clear_city_cache()

    await message.answer("‚úÖ –ì—Ä—É–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_main_menu())
    log_user_action(user_id, "cargo_added")
    await state.clear()

# ========== –°–¶–ï–ù–ê–†–ò–ô: –ü–û–ò–°–ö –ì–†–£–ó–ê –° –ö–ù–û–ü–ö–ê–ú–ò ==========

async def cmd_start_find_cargo(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ –≥—Ä—É–∑–∞. –í–º–µ—Å—Ç–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ä–∞–∑—É –≤—ã–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    —Å–æ –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏-–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ + –∫–Ω–æ–ø–∫—É "–í—Å–µ".
    """
    user_id = await get_current_user_id(message)
    if not user_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start.")
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä (–Ω–∞–∂–∞—Ç–∏–µ "üîç –ù–∞–π—Ç–∏ –≥—Ä—É–∑")
    await message.delete()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    cities = get_unique_cities_from()

    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ–¥–∏–Ω –≥–æ—Ä–æ–¥, –∏ –≤–Ω–∏–∑—É –∫–Ω–æ–ø–∫–∞ "–í—Å–µ"
    kb_buttons = [[types.KeyboardButton(text=city)] for city in cities]
    kb_buttons.append([types.KeyboardButton(text="–í—Å–µ")])

    kb = types.ReplyKeyboardMarkup(
        keyboard=kb_buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )

    bot_msg = await message.answer(
        "üîç –ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–í—Å–µ¬ª):",
        reply_markup=kb
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ—Ç-—Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—ã–ª–æ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å
    await state.update_data(last_bot_message_id=bot_msg.message_id)

    await state.set_state(CargoSearchStates.city_from)

async def filter_city_from(message: types.Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ª–∏–±–æ "–í—Å–µ"), –¥–∞–ª–µ–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.
    """
    selected = message.text.strip()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
    await state.update_data(filter_city_from=selected.lower())

    # –£–¥–∞–ª–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–Ω–æ–ø–∫–∞) –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å –±–æ—Ç–∞
    await message.delete()
    data = await state.get_data()
    prev_bot_id = data.get("last_bot_message_id")
    if prev_bot_id:
        try:
            await message.chat.delete_message(prev_bot_id)
        except Exception:
            pass

    # –¢–µ–ø–µ—Ä—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    to_cities = get_unique_cities_to()

    kb_buttons = [[types.KeyboardButton(text=city)] for city in to_cities]
    kb_buttons.append([types.KeyboardButton(text="–í—Å–µ")])

    kb = types.ReplyKeyboardMarkup(
        keyboard=kb_buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )

    bot_msg = await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–í—Å–µ¬ª):",
        reply_markup=kb
    )
    await state.update_data(last_bot_message_id=bot_msg.message_id)
    await state.set_state(CargoSearchStates.city_to)

async def filter_city_to(message: types.Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–ª–∏–±–æ "–í—Å–µ"), –¥–∞–ª–µ–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (min/max).
    """
    selected = message.text.strip()
    await state.update_data(filter_city_to=selected.lower())

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –±–æ—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.delete()
    data = await state.get_data()
    prev_bot_id = data.get("last_bot_message_id")
    if prev_bot_id:
        try:
            await message.chat.delete_message(prev_bot_id)
        except Exception:
            pass

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    bot_msg = await message.answer(
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=generate_calendar(include_skip=True)
    )
    await state.update_data(
        last_bot_message_id=bot_msg.message_id,
        calendar_field="filter_date_from",
        calendar_next_state=CargoSearchStates.date_to,
        calendar_next_text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        calendar_next_markup=generate_calendar(include_skip=True),
    )
    await state.set_state(CargoSearchStates.date_from)

async def filter_date_from(message: types.Message, state: FSMContext):
    raw = message.text.strip().lower()
    if raw != "–Ω–µ—Ç":
        parsed = parse_date(message.text.strip())
        if not parsed:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –î–î.MM.–ì–ì–ì–ì –∏–ª–∏ ¬´–Ω–µ—Ç¬ª.")
            return
        await state.update_data(filter_date_from=parsed)
    else:
        await state.update_data(filter_date_from="–Ω–µ—Ç")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–æ—Ç-–≤–æ–ø—Ä–æ—Å
    await message.delete()
    data = await state.get_data()
    prev_bot_id = data.get("last_bot_message_id")
    if prev_bot_id:
        try:
            await message.chat.delete_message(prev_bot_id)
        except Exception:
            pass

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    bot_msg = await message.answer(
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=generate_calendar(include_skip=True)
    )
    await state.update_data(
        last_bot_message_id=bot_msg.message_id,
        calendar_field="filter_date_to",
        calendar_next_state=CargoSearchStates.date_to,
        calendar_next_text="",
        calendar_next_markup=None,
    )
    await state.set_state(CargoSearchStates.date_to)

async def filter_date_to(message: types.Message, state: FSMContext):
    raw = message.text.strip().lower()
    if raw != "–Ω–µ—Ç":
        parsed = parse_date(message.text.strip())
        if not parsed:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –î–î.MM.–ì–ì–ì–ì –∏–ª–∏ ¬´–Ω–µ—Ç¬ª.")
            return
        await state.update_data(filter_date_to=parsed)
    else:
        await state.update_data(filter_date_to="–Ω–µ—Ç")

    data = await state.get_data()
    user_id = await get_current_user_id(message)
    fc_from = data.get("filter_city_from", "")
    fc_to = data.get("filter_city_to", "")
    fd_from = data.get("filter_date_from", "")
    fd_to = data.get("filter_date_to", "")

    # –°–æ–±–∏—Ä–∞–µ–º SQL-–∑–∞–ø—Ä–æ—Å —Å —É—á—ë—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    query = """
    SELECT c.id, u.name, c.city_from, c.region_from, c.city_to, c.region_to, c.date_from, c.weight, c.body_type
    FROM cargo c
    JOIN users u ON c.user_id = u.id
    WHERE 1=1
    """
    params = []
    if fc_from != "–≤—Å–µ":
        query += " AND lower(c.city_from) = ?"
        params.append(fc_from)
    if fc_to != "–≤—Å–µ":
        query += " AND lower(c.city_to) = ?"
        params.append(fc_to)
    if fd_from != "–Ω–µ—Ç":
        query += " AND date(c.date_from) >= date(?)"
        params.append(fd_from)
    if fd_to != "–Ω–µ—Ç":
        query += " AND date(c.date_from) <= date(?)"
        params.append(fd_to)

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute(query, tuple(params))
    rows = cursor.fetchall()
    conn.close()

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–æ—Ç-–≤–æ–ø—Ä–æ—Å
    await message.delete()
    prev_bot_id = data.get("last_bot_message_id")
    if prev_bot_id:
        try:
            await message.chat.delete_message(prev_bot_id)
        except Exception:
            pass

    if not rows:
        await message.answer("üì¨ –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_main_menu())
    else:
        await show_search_results(message, rows)

    log_user_action(user_id, "cargo_search", f"results={len(rows)}")
    await state.clear()


async def filter_date_from_cb(callback: types.CallbackQuery, state: FSMContext):
    """Handle date_from selection for cargo search."""
    if callback.data == "cal:skip":
        await state.update_data(filter_date_from="–Ω–µ—Ç")
    else:
        value = callback.data.split(":", 1)[1]
        await state.update_data(filter_date_from=value)
    await callback.message.delete()
    bot_msg = await callback.message.answer(
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=generate_calendar(include_skip=True)
    )
    await state.update_data(
        last_bot_message_id=bot_msg.message_id,
        calendar_field="filter_date_to",
    )
    await state.set_state(CargoSearchStates.date_to)
    await callback.answer()


async def filter_date_to_cb(callback: types.CallbackQuery, state: FSMContext):
    """Handle date_to selection for cargo search and show results."""
    if callback.data == "cal:skip":
        await state.update_data(filter_date_to="–Ω–µ—Ç")
    else:
        value = callback.data.split(":", 1)[1]
        await state.update_data(filter_date_to=value)

    data = await state.get_data()
    user_id = await get_current_user_id(callback.message)
    fc_from = data.get("filter_city_from", "")
    fc_to = data.get("filter_city_to", "")
    fd_from = data.get("filter_date_from", "")
    fd_to = data.get("filter_date_to", "")

    query = """
    SELECT c.id, u.name, c.city_from, c.region_from, c.city_to, c.region_to, c.date_from, c.weight, c.body_type
    FROM cargo c
    JOIN users u ON c.user_id = u.id
    WHERE 1=1
    """
    params = []
    if fc_from != "–≤—Å–µ":
        query += " AND lower(c.city_from) = ?"
        params.append(fc_from)
    if fc_to != "–≤—Å–µ":
        query += " AND lower(c.city_to) = ?"
        params.append(fc_to)
    if fd_from != "–Ω–µ—Ç":
        query += " AND date(c.date_from) >= date(?)"
        params.append(fd_from)
    if fd_to != "–Ω–µ—Ç":
        query += " AND date(c.date_from) <= date(?)"
        params.append(fd_to)

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute(query, tuple(params))
    rows = cursor.fetchall()
    conn.close()

    await callback.message.delete()
    prev_bot_id = data.get("last_bot_message_id")
    if prev_bot_id:
        try:
            await callback.message.chat.delete_message(prev_bot_id)
        except Exception:
            pass

    if not rows:
        await callback.message.answer("üì¨ –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_main_menu())
    else:
        await show_search_results(callback.message, rows)

    log_user_action(user_id, "cargo_search", f"results={len(rows)}")
    await state.clear()

def register_cargo_handlers(dp: Dispatcher):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ (–æ—Å—Ç–∞–ª–æ—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    dp.message.register(cmd_start_add_cargo, lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–∑")
    dp.message.register(process_region_from, StateFilter(CargoAddStates.region_from))
    dp.message.register(process_city_from,   StateFilter(CargoAddStates.city_from))
    dp.message.register(process_region_to,   StateFilter(CargoAddStates.region_to))
    dp.message.register(process_city_to,     StateFilter(CargoAddStates.city_to))
    dp.message.register(process_date_from,   StateFilter(CargoAddStates.date_from))
    dp.message.register(process_date_to,     StateFilter(CargoAddStates.date_to))
    dp.callback_query.register(
        process_date_from_cb,
        StateFilter(CargoAddStates.date_from),
        lambda c: c.data.startswith("cal:")
    )
    dp.callback_query.register(
        process_date_to_cb,
        StateFilter(CargoAddStates.date_to),
        lambda c: c.data.startswith("cal:")
    )
    dp.message.register(process_weight,      StateFilter(CargoAddStates.weight))
    dp.message.register(process_body_type,   StateFilter(CargoAddStates.body_type))
    dp.message.register(process_is_local,    StateFilter(CargoAddStates.is_local))
    dp.message.register(process_comment,     StateFilter(CargoAddStates.comment))

    dp.message.register(cmd_start_find_cargo, lambda m: m.text == "üîç –ù–∞–π—Ç–∏ –≥—Ä—É–∑")
    dp.message.register(filter_city_from,     StateFilter(CargoSearchStates.city_from))
    dp.message.register(filter_city_to,       StateFilter(CargoSearchStates.city_to))
    dp.message.register(filter_date_from,     StateFilter(CargoSearchStates.date_from))
    dp.message.register(filter_date_to,       StateFilter(CargoSearchStates.date_to))
    dp.callback_query.register(
        filter_date_from_cb,
        StateFilter(CargoSearchStates.date_from),
        lambda c: c.data.startswith("cal:")
    )
    dp.callback_query.register(
        filter_date_to_cb,
        StateFilter(CargoSearchStates.date_to),
        lambda c: c.data.startswith("cal:")
    )
