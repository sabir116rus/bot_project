# handlers/cargo.py

from aiogram import types, Dispatcher
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton
from db import get_connection
from datetime import datetime

# 1) –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–¥–æ–ø–æ–ª–Ω–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–ª–∞—Å—Å–æ–º)
class CargoAddStates(StatesGroup):
    city_from    = State()
    region_from  = State()
    city_to      = State()
    region_to    = State()
    date_from    = State()
    date_to      = State()
    weight       = State()
    body_type    = State()
    is_local     = State()
    comment      = State()

# 2) –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
class CargoSearchStates(StatesGroup):
    city_from    = State()
    city_to      = State()
    date_from    = State()
    date_to      = State()


# –°—Ü–µ–Ω–∞—Ä–∏–π: /add_cargo
async def cmd_add_cargo(message: types.Message, state: FSMContext):
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (message.from_user.id,))
    user = cursor.fetchone()
    conn.close()

    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start.")
        return

    await message.answer("üì¶ –ù–∞—á–Ω—ë–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞.\n–û—Ç–∫—É–¥–∞ (–≥–æ—Ä–æ–¥):")
    await state.set_state(CargoAddStates.city_from)

# 3) –°–æ—Å—Ç–æ—è–Ω–∏—è ¬´–¥–æ–±–∞–≤–ª–µ–Ω–∏—è¬ª
async def process_city_from(message: types.Message, state: FSMContext):
    await state.update_data(city_from=message.text)
    await message.answer("–†–µ–≥–∏–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    await state.set_state(CargoAddStates.region_from)

async def process_region_from(message: types.Message, state: FSMContext):
    await state.update_data(region_from=message.text)
    await message.answer("–ö—É–¥–∞ (–≥–æ—Ä–æ–¥):")
    await state.set_state(CargoAddStates.city_to)

async def process_city_to(message: types.Message, state: FSMContext):
    await state.update_data(city_to=message.text)
    await message.answer("–†–µ–≥–∏–æ–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:")
    await state.set_state(CargoAddStates.region_to)

async def process_region_to(message: types.Message, state: FSMContext):
    await state.update_data(region_to=message.text)
    await message.answer("–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(CargoAddStates.date_from)

async def process_date_from(message: types.Message, state: FSMContext):
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É
    try:
        parsed = datetime.strptime(message.text, "%d.%m.%Y")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return
    await state.update_data(date_from=parsed.strftime("%Y-%m-%d"))
    await message.answer("–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(CargoAddStates.date_to)

async def process_date_to(message: types.Message, state: FSMContext):
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å date_from
    try:
        parsed_to = datetime.strptime(message.text, "%d.%m.%Y")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return

    data = await state.get_data()
    df = data.get("date_from")
    dt_from = datetime.strptime(df, "%Y-%m-%d") if df else None
    if dt_from and parsed_to < dt_from:
        await message.answer("–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return

    await state.update_data(date_to=parsed_to.strftime("%Y-%m-%d"))
    await message.answer("–í–µ—Å (–≤ —Ç–æ–Ω–Ω–∞—Ö, —Ü–∏—Ñ—Ä–æ–π):")
    await state.set_state(CargoAddStates.weight)

async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Å —Ü–∏—Ñ—Ä–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12):")
        return

    await state.update_data(weight=weight)
    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä")],
            [KeyboardButton(text="–¢–µ–Ω—Ç")],
            [KeyboardButton(text="–ò–∑–æ—Ç–µ—Ä–º")],
            [KeyboardButton(text="–ù–µ –≤–∞–∂–Ω–æ")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫—É–∑–æ–≤–∞:", reply_markup=kb)
    await state.set_state(CargoAddStates.body_type)

async def process_body_type(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text not in ("–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä", "–¢–µ–Ω—Ç", "–ò–∑–æ—Ç–µ—Ä–º", "–ù–µ –≤–∞–∂–Ω–æ"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫: '–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä', '–¢–µ–Ω—Ç', '–ò–∑–æ—Ç–µ—Ä–º' –∏–ª–∏ '–ù–µ –≤–∞–∂–Ω–æ'.")
        return

    await state.update_data(body_type=text)
    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–î–∞ (–≤–Ω—É—Ç—Ä–∏–≥–æ—Ä–æ–¥—Å–∫–æ–π)")],
            [types.KeyboardButton(text="–ù–µ—Ç (–º–µ–∂–¥—É–≥–æ—Ä–æ–¥–Ω–∏–π)")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–í–Ω—É—Ç—Ä–∏–≥–æ—Ä–æ–¥—Å–∫–æ–π –≥—Ä—É–∑?", reply_markup=kb)
    await state.set_state(CargoAddStates.is_local)

async def process_is_local(message: types.Message, state: FSMContext):
    text = message.text.strip().lower()
    if not ("–¥–∞" in text or "–Ω–µ—Ç" in text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫: '–î–∞ (–≤–Ω—É—Ç—Ä–∏–≥–æ—Ä–æ–¥—Å–∫–æ–π)' –∏–ª–∏ '–ù–µ—Ç (–º–µ–∂–¥—É–≥–æ—Ä–æ–¥–Ω–∏–π)'.")
        return

    is_local = 1 if "–¥–∞" in text else 0
    await state.update_data(is_local=is_local)
    await message.answer("–î–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'):", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(CargoAddStates.comment)

async def process_comment(message: types.Message, state: FSMContext):
    comment = message.text if message.text.strip().lower() != "–Ω–µ—Ç" else ""
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –µ—Å—Ç—å –≤ data
    required_fields = ["city_from", "region_from", "city_to", "region_to", "date_from", "date_to", "weight", "body_type", "is_local"]
    if not all(f in data for f in required_fields):
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É /add_cargo –µ—â—ë —Ä–∞–∑.")
        await state.clear()
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (message.from_user.id,))
    user = cursor.fetchone()
    if not user:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start.")
        conn.close()
        await state.clear()
        return

    user_id = user["id"]
    cursor.execute(
        """
        INSERT INTO cargo (
            user_id,
            city_from, region_from,
            city_to, region_to,
            date_from, date_to,
            weight, body_type,
            is_local, comment, created_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """,
        (
            user_id,
            data["city_from"], data["region_from"],
            data["city_to"], data["region_to"],
            data["date_from"], data["date_to"],
            data["weight"], data["body_type"],
            data["is_local"], comment,
            datetime.now().isoformat()
        )
    )
    conn.commit()
    conn.close()

    await message.answer("‚úÖ –ì—Ä—É–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=types.ReplyKeyboardRemove())
    await state.clear()


# 13) –°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–∏—Å–∫–∞: /find_cargo
async def cmd_find_cargo(message: types.Message, state: FSMContext):
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (message.from_user.id,))
    user = cursor.fetchone()
    conn.close()

    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start.")
        return

    await message.answer("üîç –ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞.\n–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∏–ª–∏ '–≤—Å–µ'):")
    await state.set_state(CargoSearchStates.city_from)

async def filter_city_from(message: types.Message, state: FSMContext):
    await state.update_data(filter_city_from=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–∏–ª–∏ '–≤—Å–µ'):")
    await state.set_state(CargoSearchStates.city_to)

async def filter_city_to(message: types.Message, state: FSMContext):
    await state.update_data(filter_city_to=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ '–Ω–µ—Ç':")
    await state.set_state(CargoSearchStates.date_from)

async def filter_date_from(message: types.Message, state: FSMContext):
    raw = message.text.strip().lower()
    if raw != "–Ω–µ—Ç":
        try:
            parsed = datetime.strptime(message.text, "%d.%m.%Y").strftime("%Y-%m-%d")
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '–Ω–µ—Ç'.")
            return
        await state.update_data(filter_date_from=parsed)
    else:
        await state.update_data(filter_date_from="–Ω–µ—Ç")

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ '–Ω–µ—Ç':")
    await state.set_state(CargoSearchStates.date_to)

async def filter_date_to(message: types.Message, state: FSMContext):
    raw = message.text.strip().lower()
    if raw != "–Ω–µ—Ç":
        try:
            parsed = datetime.strptime(message.text, "%d.%m.%Y").strftime("%Y-%m-%d")
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '–Ω–µ—Ç'.")
            return
        await state.update_data(filter_date_to=parsed)
    else:
        await state.update_data(filter_date_to="–Ω–µ—Ç")

    data = await state.get_data()
    fc_from = data.get("filter_city_from", "").lower()
    fc_to   = data.get("filter_city_to", "").lower()
    fd_from = data.get("filter_date_from", "")
    fd_to   = data.get("filter_date_to", "")

    # –°–æ–±–∏—Ä–∞–µ–º SQL
    query = """
    SELECT c.id, u.name, c.city_from, c.region_from, c.city_to, c.region_to, c.date_from, c.weight, c.body_type
    FROM cargo c
    JOIN users u ON c.user_id = u.id
    WHERE 1=1
    """
    params = []
    if fc_from != "–≤—Å–µ":
        query += " AND lower(c.city_from) = ?"
        params.append(fc_from)
    if fc_to != "–≤—Å–µ":
        query += " AND lower(c.city_to) = ?"
        params.append(fc_to)
    if fd_from != "–Ω–µ—Ç":
        query += " AND date(c.date_from) >= date(?)"
        params.append(fd_from)
    if fd_to != "–Ω–µ—Ç":
        query += " AND date(c.date_from) <= date(?)"
        params.append(fd_to)

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute(query, tuple(params))
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await message.answer("üì¨ –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        text = "üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã:\n\n"
        for r in rows:
            text += (
                f"ID: {r['id']}\n"
                f"–í–ª–∞–¥–µ–ª–µ—Ü: {r['name']}\n"
                f"{r['city_from']}, {r['region_from']} ‚Üí {r['city_to']}, {r['region_to']}\n"
                f"–î–∞—Ç–∞: {r['date_from']}\n"
                f"–í–µ—Å: {r['weight']} —Ç, –ö—É–∑–æ–≤: {r['body_type']}\n\n"
            )
        await message.answer(text)

    await state.clear()


# 18) –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_cargo_handlers(dp: Dispatcher):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞
    dp.message.register(cmd_add_cargo, Command(commands=["add_cargo"]))
    dp.message.register(process_city_from,   StateFilter(CargoAddStates.city_from))
    dp.message.register(process_region_from, StateFilter(CargoAddStates.region_from))
    dp.message.register(process_city_to,     StateFilter(CargoAddStates.city_to))
    dp.message.register(process_region_to,   StateFilter(CargoAddStates.region_to))
    dp.message.register(process_date_from,   StateFilter(CargoAddStates.date_from))
    dp.message.register(process_date_to,     StateFilter(CargoAddStates.date_to))
    dp.message.register(process_weight,      StateFilter(CargoAddStates.weight))
    dp.message.register(process_body_type,   StateFilter(CargoAddStates.body_type))
    dp.message.register(process_is_local,    StateFilter(CargoAddStates.is_local))
    dp.message.register(process_comment,     StateFilter(CargoAddStates.comment))

    # –ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞
    dp.message.register(cmd_find_cargo,      Command(commands=["find_cargo"]))
    dp.message.register(filter_city_from,    StateFilter(CargoSearchStates.city_from))
    dp.message.register(filter_city_to,      StateFilter(CargoSearchStates.city_to))
    dp.message.register(filter_date_from,    StateFilter(CargoSearchStates.date_from))
    dp.message.register(filter_date_to,      StateFilter(CargoSearchStates.date_to))
